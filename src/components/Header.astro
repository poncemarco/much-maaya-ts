<header class="py-4 px-4 mx-auto max-w-xl lg:py-16 lg:px-6">
  <div class="text-center mb-2 lg:mb-2">
      <div class="flex items-center justify-center">
        <div class="inline-flex items-center leading-none text-gray-900">
          <img class="w-auto h-20 " src="/logo.png" alt="Logo">
        </div>
        <slot name="theme-button"></slot>
      </div>
    <div class="py-2 mx-8">   
      <label for="default-search" class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white">Búsqueda</label>
      <div class="relative">
          <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
              <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
              </svg>
          </div>
          <input 
            type="search" 
            id="search" 
            class="block w-full p-4 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
            placeholder="Busca por producto, categoria o marca" 
            required
          >
      </div>
      <p id="searchReadout" class="dark:text-white"></p>
        <section>
            <ul id="searchResults" class="max-w-md divide-y divide-gray-200 dark:divide-gray-700 dark:text-white"></ul>
        </section>
    </div>
  </div>
  <slot name="navbar"></slot>
</header>


<script>
  import DOMPurify from 'dompurify';
  import Fuse from 'fuse.js';
  import { SITE_URL } from '../consts';
  document.addEventListener('astro:page-load', () => {
  //variables 
    let SEARCH_DATA: string[];
    let FUSE_INSTANCE: Fuse<string>; 
    let FUSE_OPTIONS = {
        includeScore: true,
        shouldSort: true, 
        keys: [ 
            {
                name: 'title',
                weight: 0.7,
            },
            {
                name: 'category',
                weight: 0.5,
            },
            {
                name: 'unit',
                weight: 0.3,
            }],
        threshold: 0.5,
    };
    const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-loader-2" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round" id="spinner">
                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                        <path d="M12 3a9 9 0 1 0 9 9" />
                        <style>
                            #spinner {
                                animation: spin 1s linear infinite;
                            }
                            @keyframes spin {
                                0% {
                                    transform: rotate(0deg);
                                }
                                100% {
                                    transform: rotate(360deg);
                                }
                            }
                    </svg>`;

    //selectors
    const search = document.querySelector('#search') as HTMLInputElement;
    const searchReadout = document.querySelector('#searchReadout') as HTMLInputElement;
    const resultsList = document.querySelector('#searchResults') as HTMLElement; 
    //functions

    function updateSearchPageURL(search: string) {
        const url = new URL(window.location.href);
        url.searchParams.set('q', search);
        window.history.replaceState(null, "", url);
    }

    function generateSearchList(results:any[]) {
        return results.map((r) => {
            const { title, unit, id, image, price } = r.item;
            return `<li class="pb-3 sm:pb-4">
                        <a href="/catalogo/${id}">
                          <div class="flex items-center space-x-4 rtl:space-x-reverse">
                            <div class="flex-shrink-0">
                                <img class="w-8 h-8 rounded-full" src="${image}" alt="Neil image">
                            </div>
                            <div class="flex-1 min-w-0">
                                <p class="text-sm font-medium text-gray-900 truncate dark:text-white">
                                  ${title}
                                </p>
                                <p class="text-sm text-gray-500 truncate dark:text-gray-400">
                                  ${unit}
                                </p>
                            </div>
                            <div class="inline-flex items-center text-base font-semibold text-gray-900 dark:text-white">
                                $${price.toFixed(2)}
                            </div>
                          </div>
                        </a>
                    </li> `
        })
        .join('');
    }

    async function fetchSearchResults(search : string) {
    if (search.length === 0) {
      resultsList.innerHTML = "";
      searchReadout.innerHTML = "";
      return;
    }
    resultsList.innerHTML = SPINNER;
    if (!SEARCH_DATA) {
      try {
        const res = await fetch("/search.json");
        if (!res.ok) {
          throw new Error("Something went wrong…please try again");
        }
        const data = await res.json();
        SEARCH_DATA = data;
      } catch (e) {
        console.error(e);
      }
    }
    if (SEARCH_DATA && !FUSE_INSTANCE) {
      FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
    }
    if (!FUSE_INSTANCE) return;
    const searchResult = FUSE_INSTANCE.search(search);
    resultsList.innerHTML =
      searchResult.length > 0
        ? generateSearchList(searchResult)
        : "No results found…";
  }

    function updateDocumentTitle(search: HTMLInputElement) {
        document.title = search ? `Resultados de búsqueda para: ${search}` : 'Search';
    } 

    function updateSearchReadout(search : URLSearchParams) {
        searchReadout.textContent = search
        ? `Resultados de búsqueda para: ${search}`
        : 'Busca productos';

    }

    //listeners

    window.addEventListener("DOMContentLoaded", () => {
        const urlParams = DOMPurify.sanitize (
            new URLSearchParams(window.location.search).get('q')
            );
        updateDocumentTitle(urlParams);
        updateSearchReadout(urlParams);
        search.value = urlParams ?? '';
    });

    search.addEventListener("input", () => {
        const searchTerm = DOMPurify.sanitize(search.value);
        updateDocumentTitle(searchTerm);
        updateSearchReadout(searchTerm);
        fetchSearchResults(searchTerm);
        updateSearchPageURL(searchTerm);
    });
  });
</script>